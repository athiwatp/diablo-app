<?phpnamespace App\Rankings\Services\Profile;use App\Rankings\Services\Service;use App\Hero;use App\Profile;use App\ProfileStat;use Carbon\Carbon;use stdClass;use Response;class ProfileService extends Service{    /**     * ProfileService constructor     *     * @param Profile $profile     */    public function __construct()    {        parent::__construct();        $this->stats_model = new ProfileStat;    }    /**     * @param Profile $profile     */    public function profile(Profile $profile)    {        $this->model = $profile;        return $this;    }    /**     * Update the Profile     *     * @return mixed     */    public function update()    {        $this->response = $this->api->profile(            $this->model->battle_tag, $this->model->region        );        if ($this->apiHasNoResponse()) {            return Response::json('Profile record not found, please try again later', 404);        }        $this->updateHeroes();        $this->updateModel();        return $this->model;    }    /**     * Pull in all applicable heroes and create records     */    public function updateHeroes()    {        foreach ($this->response->heroes as $hero) {            if ($this->heroLevelIsTooLow($hero)) {                continue;            }            $hero = $this->parseHero($hero);            Hero::updateOrCreate([                'battlenet_hero_id' => $hero['id'],                'profile_id' => $this->model->id            ], $hero);        }    }    /**     * Parse the Hero record     *     * @param stdClass $record     * @return array     */    public function parseHero(stdClass $record)    {        $hero = [];        foreach ($record as $key => $data) {            $key = snake_case($key);            $hero[$key] = $data;        }        $hero['kills'] = $hero['kills']->elites;        $hero['season'] = $hero['seasonal'] == true            ? true            : false;        $hero['region'] = strtolower($this->model->region);        $hero['battle_tag'] = $this->model->battle_tag;        return $hero;    }    /**     * Update the Profile model     */    public function updateModel()    {        $this->model->queued_at = Carbon::now();        $this->model->queued = false;        $this->model->save();        $this->updateStats();    }    /**     * Update the Profile stats     */    public function updateStats()    {        ProfileStat::updateOrCreate([            'profile_id' => $this->model->id        ], $this->statStub());    }    /**     * Profile stat stub     *     * @return array     */    public function statStub()    {        return [            'clan_name' => $this->response->guildName,            'paragon_level' => $this->response->paragonLevel,            'paragon_level_hardcore' => $this->response->paragonLevelHardcore,            'paragon_level_season' => $this->response->paragonLevelSeason,            'paragon_level_season_hardcore' => $this->response->paragonLevelSeasonHardcore,            'kills_monsters' => $this->response->kills->monsters,            'kills_elites' => $this->response->kills->elites        ];    }    /**     * @param $search     * @return mixed     */    public function search($search)    {        if (preg_match('/(#\d{4})|(-\d{4})/', $search)) {            $profile = Profile::where('battle_tag', '=', $search)                ->get();            if (!empty($profile)) {                return $profile;            }            foreach (['us', 'eu', 'kr', 'tw'] as $region) {                $response = $this->api->profile($search, $region);                if (isset($response->code)) {                    continue;                }                Profile::updateOrCreate([                    'battle_tag' => $response->battleTag,                    'region' => $region                ]);            }        }    }}